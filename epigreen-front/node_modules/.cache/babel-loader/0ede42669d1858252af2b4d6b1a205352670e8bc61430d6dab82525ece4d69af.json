{"ast":null,"code":"var _jsxFileName = \"/Users/nawreshajabouda/Documents/GitHub/EpiGreen-Ing2/epigreen-front/src/components/Livraison.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { getResultFromGeocodingApi, getResultFromRoutingApi } from \"../api/Geoapify\";\nimport { getDeliveryById } from \"./Delivery\";\nimport { getDeliveryScore, calculateCo2 } from \"./DeliveryScoring\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Livraison() {\n  _s();\n  // Choose a delivery to calculate its carbon footprint\n  const [deliveryId, setDeliveryId] = useState(\"\");\n  const [delivery, setDelivery] = useState(null);\n\n  // To fetch those objects' data from delivery\n  const [account, setAccount] = useState(null);\n  const [customer, setCustomer] = useState(null);\n  const [entrepot, setEntrepot] = useState(null);\n  const [transportation, setTransportation] = useState(null);\n  const [distance, setDistance] = useState(null);\n  const [score, setScore] = useState(null);\n  const [customerCoordinates, setCustomerCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [entrepotCoordinates, setEntrepotCoordinates] = useState({\n    latitude: null,\n    longitude: null\n  });\n  const [cO2quantity, setCO2quantity] = useState(null);\n\n  // ===== Fetching objects' data from delivery =====\n  // Function to fetch delivery data\n  const fetchDeliveryData = async () => {\n    try {\n      const deliveryData = await getDeliveryById(deliveryId);\n      setDelivery(deliveryData);\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération des données de livraison : \", error);\n    }\n  };\n  useEffect(() => {\n    if (delivery) {\n      var _delivery$account;\n      setAccount(delivery.account);\n      setCustomer((_delivery$account = delivery.account) === null || _delivery$account === void 0 ? void 0 : _delivery$account.customer);\n      setEntrepot(delivery.entrepot);\n      setTransportation(delivery.transportation);\n    }\n  }, [delivery]);\n\n  // ===== Function to call the geocoding API for the customer =====\n  const fetchCustomerCoordinates = async () => {\n    if (customer !== null && customer !== void 0 && customer.address) {\n      try {\n        var _response$features$, _response$features$2;\n        const response = await getResultFromGeocodingApi(customer.address);\n        const lat = (_response$features$ = response.features[0]) === null || _response$features$ === void 0 ? void 0 : _response$features$.properties.lat;\n        const lon = (_response$features$2 = response.features[0]) === null || _response$features$2 === void 0 ? void 0 : _response$features$2.properties.lon;\n        if (lat !== customerCoordinates.latitude || lon !== customerCoordinates.longitude) {\n          setCustomerCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\n      }\n    }\n  };\n\n  // ===== Function to call the geocoding API for the entrepot =====\n  const fetchEntrepotCoordinates = async () => {\n    if (entrepot !== null && entrepot !== void 0 && entrepot.address) {\n      try {\n        var _response$features$3, _response$features$4;\n        const response = await getResultFromGeocodingApi(entrepot.address);\n        const lat = (_response$features$3 = response.features[0]) === null || _response$features$3 === void 0 ? void 0 : _response$features$3.properties.lat;\n        const lon = (_response$features$4 = response.features[0]) === null || _response$features$4 === void 0 ? void 0 : _response$features$4.properties.lon;\n        if (lat !== entrepotCoordinates.latitude || lon !== entrepotCoordinates.longitude) {\n          setEntrepotCoordinates({\n            latitude: lat,\n            longitude: lon\n          });\n        }\n      } catch (error) {\n        console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\n      }\n    }\n  };\n\n  // ===== Function to call the routage API =====\n  const callRoutingApi = async () => {\n    console.log(\"DANS CALL ROUTING API\");\n    try {\n      var _response$features$5;\n      const response = await getResultFromRoutingApi(customerCoordinates.latitude, customerCoordinates.longitude, entrepotCoordinates.latitude, entrepotCoordinates.longitude);\n      const distance = ((_response$features$5 = response.features[0]) === null || _response$features$5 === void 0 ? void 0 : _response$features$5.properties.distance) / 1000;\n      setDistance(distance);\n    } catch (error) {\n      console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\n    }\n  };\n\n  // After getting customer and entrepot's data, fetching their coordonates\n  useEffect(() => {\n    if (customer) {\n      fetchCustomerCoordinates();\n    }\n  }, [customer]);\n  useEffect(() => {\n    if (entrepot) {\n      fetchEntrepotCoordinates();\n    }\n  }, [entrepot]);\n  useEffect(() => {\n    if (customerCoordinates.latitude && customerCoordinates.longitude && entrepotCoordinates.latitude && entrepotCoordinates.longitude) {\n      callRoutingApi();\n    }\n  }, [customerCoordinates.latitude, customerCoordinates.longitude, entrepotCoordinates.latitude, entrepotCoordinates.longitude]);\n\n  // Calculate delivry's CO2 quantity and score\n  useEffect(() => {\n    if (distance && transportation) {\n      const fetchScore = async () => {\n        // Calculate carbon footprint\n        const carbonFootprint = await calculateCo2(distance, transportation.kgCo2);\n        setCO2quantity(carbonFootprint);\n\n        // Get carbon footprint's score\n        setScore(await getDeliveryScore(carbonFootprint));\n      };\n      fetchScore();\n    }\n  }, [distance, transportation]);\n\n  // Display\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Choisissez votre mode de livraison : \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Livraison \\xE0 domicile :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Choix du num\\xE9ro de livraison :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Livraison ID : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: deliveryId,\n        onChange: e => setDeliveryId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchDeliveryData,\n      children: \"R\\xE9cup\\xE9rer donn\\xE9es de la livraison depuis la BD\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), delivery && account && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"M\\xE9tadonn\\xE9es (pour la d\\xE9mo) : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 26\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Client :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 49\n        }, this), \"Latitude client : \", customerCoordinates.latitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 102\n        }, this), \"Longitude client : \", customerCoordinates.longitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 75\n        }, this), \"Adresse client : \", customer.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Entrepot :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 51\n        }, this), \"Latitude entrepot : \", entrepotCoordinates.latitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 106\n        }, this), \"Longitude entrepot : \", entrepotCoordinates.longitude, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 77\n        }, this), \"Adresse entrepot : \", entrepot.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }, this), distance && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Distance parcourue lors de la livraison :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 24\n        }, this), \" \", distance, \" km.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 97\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Co2 engendr\\xE9 par cette livraison :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 24\n        }, this), \" \", cO2quantity, \" kgCo2.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 96\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Score carbone de la livraison : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 24\n        }, this), \" \", score, \".\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 82\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n}\n_s(Livraison, \"S4/EbqGS7BaF0zFIPp4by8nTJMM=\");\n_c = Livraison;\nvar _c;\n$RefreshReg$(_c, \"Livraison\");","map":{"version":3,"names":["React","useState","useEffect","getResultFromGeocodingApi","getResultFromRoutingApi","getDeliveryById","getDeliveryScore","calculateCo2","jsxDEV","_jsxDEV","Livraison","_s","deliveryId","setDeliveryId","delivery","setDelivery","account","setAccount","customer","setCustomer","entrepot","setEntrepot","transportation","setTransportation","distance","setDistance","score","setScore","customerCoordinates","setCustomerCoordinates","latitude","longitude","entrepotCoordinates","setEntrepotCoordinates","cO2quantity","setCO2quantity","fetchDeliveryData","deliveryData","error","console","_delivery$account","fetchCustomerCoordinates","address","_response$features$","_response$features$2","response","lat","features","properties","lon","fetchEntrepotCoordinates","_response$features$3","_response$features$4","callRoutingApi","log","_response$features$5","fetchScore","carbonFootprint","kgCo2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/nawreshajabouda/Documents/GitHub/EpiGreen-Ing2/epigreen-front/src/components/Livraison.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { getResultFromGeocodingApi, getResultFromRoutingApi } from \"../api/Geoapify\";\r\nimport { getDeliveryById } from \"./Delivery\";\r\nimport {getDeliveryScore, calculateCo2} from \"./DeliveryScoring\";\r\n\r\nexport default function Livraison() {\r\n    // Choose a delivery to calculate its carbon footprint\r\n    const [deliveryId, setDeliveryId] = useState(\"\");\r\n    const [delivery, setDelivery] = useState(null);\r\n\r\n    // To fetch those objects' data from delivery\r\n    const [account, setAccount] = useState(null);\r\n    const [customer, setCustomer] = useState(null);\r\n    const [entrepot, setEntrepot] = useState(null);\r\n    const [transportation, setTransportation] = useState(null);\r\n\r\n    const [distance, setDistance] = useState(null);\r\n    const [score, setScore] = useState(null);\r\n\r\n    const [customerCoordinates, setCustomerCoordinates] = useState({\r\n        latitude: null,\r\n        longitude: null,\r\n    });\r\n    const [entrepotCoordinates, setEntrepotCoordinates] = useState({\r\n        latitude: null,\r\n        longitude: null,\r\n    });\r\n\r\n    const [cO2quantity, setCO2quantity] = useState(null);\r\n\r\n\r\n    // ===== Fetching objects' data from delivery =====\r\n    // Function to fetch delivery data\r\n    const fetchDeliveryData = async () => {\r\n        try {\r\n            const deliveryData = await getDeliveryById(deliveryId);\r\n            setDelivery(deliveryData);\r\n        } catch (error) {\r\n            console.error(\"Erreur lors de la récupération des données de livraison : \", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (delivery) {\r\n            setAccount(delivery.account);\r\n            setCustomer(delivery.account?.customer);\r\n            setEntrepot(delivery.entrepot);\r\n            setTransportation(delivery.transportation);\r\n        }\r\n    }, [delivery]);\r\n\r\n    // ===== Function to call the geocoding API for the customer =====\r\n    const fetchCustomerCoordinates = async () => {\r\n        if (customer?.address) {\r\n            try {\r\n                const response = await getResultFromGeocodingApi(customer.address);\r\n                const lat = response.features[0]?.properties.lat;\r\n                const lon = response.features[0]?.properties.lon;\r\n                if (\r\n                    lat !== customerCoordinates.latitude ||\r\n                    lon !== customerCoordinates.longitude\r\n                ) {\r\n                    setCustomerCoordinates({ latitude: lat, longitude: lon });\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour le client : \", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    // ===== Function to call the geocoding API for the entrepot =====\r\n    const fetchEntrepotCoordinates = async () => {\r\n        if (entrepot?.address) {\r\n            try {\r\n                const response = await getResultFromGeocodingApi(entrepot.address);\r\n                const lat = response.features[0]?.properties.lat;\r\n                const lon = response.features[0]?.properties.lon;\r\n                if (\r\n                    lat !== entrepotCoordinates.latitude ||\r\n                    lon !== entrepotCoordinates.longitude\r\n                ) {\r\n                    setEntrepotCoordinates({ latitude: lat, longitude: lon });\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Erreur lors de l'appel à l'API de géocodage pour l'entrepot : \", error);\r\n            }\r\n        }\r\n    };\r\n\r\n    // ===== Function to call the routage API =====\r\n    const callRoutingApi = async () => {\r\n        console.log(\"DANS CALL ROUTING API\");\r\n        try {\r\n            const response = await getResultFromRoutingApi(customerCoordinates.latitude, customerCoordinates.longitude, entrepotCoordinates.latitude,entrepotCoordinates.longitude);\r\n            const distance = response.features[0]?.properties.distance / 1000;\r\n            setDistance(distance);\r\n        } catch (error) {\r\n            console.error(\"Erreur lors de l'appel à l'API de routage : \", error);\r\n        }\r\n    };\r\n\r\n\r\n    // After getting customer and entrepot's data, fetching their coordonates\r\n    useEffect(() => {\r\n        if (customer) {\r\n            fetchCustomerCoordinates();\r\n        }\r\n    }, [customer]);\r\n\r\n    useEffect(() => {\r\n        if (entrepot) {\r\n            fetchEntrepotCoordinates();\r\n        }\r\n    }, [entrepot]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (\r\n            customerCoordinates.latitude && customerCoordinates.longitude &&\r\n            entrepotCoordinates.latitude && entrepotCoordinates.longitude\r\n        ) {\r\n            callRoutingApi();\r\n        }\r\n    }, [customerCoordinates.latitude, customerCoordinates.longitude,\r\n    entrepotCoordinates.latitude, entrepotCoordinates.longitude]);\r\n\r\n\r\n    // Calculate delivry's CO2 quantity and score\r\n    useEffect(() => {\r\n        if (distance && transportation) {\r\n            const fetchScore = async () => {\r\n                // Calculate carbon footprint\r\n                const carbonFootprint = await calculateCo2(distance, transportation.kgCo2);\r\n                setCO2quantity(carbonFootprint);\r\n\r\n                // Get carbon footprint's score\r\n                 setScore(await getDeliveryScore(carbonFootprint));\r\n            };\r\n            fetchScore();\r\n        }\r\n    }, [distance, transportation]);\r\n\r\n\r\n\r\n    // Display\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Choisissez votre mode de livraison : </h2><br />\r\n            <h4>Livraison à domicile :</h4>\r\n            <h5>Choix du numéro de livraison :</h5>\r\n            <div>\r\n                <label>Livraison ID : </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={deliveryId}\r\n                    onChange={(e) => setDeliveryId(e.target.value)}\r\n                />\r\n            </div>\r\n            <br />\r\n            <button onClick={fetchDeliveryData}>Récupérer données de la livraison depuis la BD</button>\r\n            {delivery && account && (\r\n                <div>\r\n                    <br/>\r\n                    <strong>Métadonnées (pour la démo) : </strong>\r\n                    <br/><br/>\r\n                    <p><strong>Client :</strong><br/>Latitude client : {customerCoordinates.latitude}<br/>\r\n                        Longitude client : {customerCoordinates.longitude}<br/>\r\n                        Adresse client : {customer.address}</p>\r\n                    <p><strong>Entrepot :</strong><br/>Latitude entrepot : {entrepotCoordinates.latitude}<br/>\r\n                        Longitude entrepot : {entrepotCoordinates.longitude}<br/>\r\n                        Adresse entrepot : {entrepot.address}</p>\r\n                </div>\r\n            )}\r\n            {distance && (\r\n                <div>\r\n                    <br/>\r\n                    <p><strong>Distance parcourue lors de la livraison :</strong> {distance} km.<br/></p>\r\n                    <p><strong>Co2 engendré par cette livraison :</strong> {cO2quantity} kgCo2.<br/></p>\r\n                    <p><strong>Score carbone de la livraison : </strong> {score}.<br/></p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}